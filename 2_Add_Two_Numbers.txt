/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int bothEmpty = 0;
        ListNode curResult = null;
        ListNode result = null;
        int add = 0;
        ListNode curL1 = l1;
        ListNode curL2 = l2;
        while(bothEmpty != 2){
            if(curL1 == null && curL2 == null){
                if(add == 0){
                    return result;
                }
                else{
                    ListNode add1 = new ListNode(1);
                    curResult.next = add1;
                    return result;
                }
                
            }
            if(curL1 == null || curL2 == null){
                bothEmpty++;
                ListNode remain = null;
                if(curL1 != null){
                    remain = curL1;
                }
                else{
                    remain = curL2;
                }
                
                int totalOneNull = remain.val + add;
                ListNode newNode = null;
                if(totalOneNull >= 10){
                    newNode = new ListNode(totalOneNull - 10);
                    add = 1;
                }
                else{
                    newNode = new ListNode(totalOneNull);
                    add = 0;
                }
                curResult.next = newNode;
                curResult = curResult.next;
                while(remain.next != null){     
                    remain = remain.next;
                    ListNode nodeCurRemain = null;
                    if(remain.val + add >= 10){
                        nodeCurRemain = new ListNode(remain.val + add - 10);
                        add = 1;
                    }
                    else{
                        nodeCurRemain = new ListNode(remain.val + add);
                        add = 0;
                    }
                    curResult.next = nodeCurRemain;
                    curResult = curResult.next;
                }
                if(add == 0){
                    return result;
                }
                else{
                    ListNode add1 = new ListNode(1);
                    curResult.next = add1;
                    return result;
                }
                
            }
            int total = curL1.val + curL2.val + add;
            ListNode both = null;
            if(total >= 10){
                both = new ListNode(total - 10);
                add = 1;
            }
            else{
                both = new ListNode(total);
                add = 0;
            }
            
            curL1 = curL1.next;
            curL2 = curL2.next;
            if(result == null){
                result = both;
                curResult = both;
                continue;
            }
            curResult.next = both;
            curResult = curResult.next;
        }
        return result;
    }
}